name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, test ]
  pull_request:
    branches: [ main, develop, test ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run linter
      run: npm run lint || echo "린트 건너뜀"
    
    - name: Build
      run: npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist

  trigger-jenkins:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/test')
    runs-on: ubuntu-latest
    
    steps:
    - name: Prepare Jenkins parameters
      id: prepare
      run: |
        # DOCKER_REGISTRY 기본값 설정
        DOCKER_REGISTRY="${{ secrets.DOCKER_REGISTRY }}"
        if [ -z "$DOCKER_REGISTRY" ]; then
          DOCKER_REGISTRY="docker.io/nullplusnull"
        fi
        echo "DOCKER_REGISTRY=$DOCKER_REGISTRY" >> $GITHUB_OUTPUT
        
        # Jenkins URL 출력
        echo "Jenkins URL: ${{ secrets.JENKINS_URL }}/job/${{ secrets.JENKINS_JOB_NAME }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Docker Registry: $DOCKER_REGISTRY"
        
    - name: Trigger Jenkins job
      run: |
        # Jenkins CSRF 방지 토큰 가져오기
        CRUMB=$(curl -s "${{ secrets.JENKINS_URL }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,\":\",//crumb)" -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" || echo ":")
        
        # Jenkins 작업 트리거
        RESPONSE=$(curl -s -w "\n%{http_code}" -X POST \
          -u "${{ secrets.JENKINS_USER }}:${{ secrets.JENKINS_TOKEN }}" \
          -H "$CRUMB" \
          -d "BRANCH_NAME=${{ github.ref_name }}" \
          -d "COMMIT_SHA=${{ github.sha }}" \
          -d "DOCKER_REGISTRY=${{ steps.prepare.outputs.DOCKER_REGISTRY }}" \
          "${{ secrets.JENKINS_URL }}/job/${{ secrets.JENKINS_JOB_NAME }}/buildWithParameters?token=${{ secrets.JENKINS_API_TOKEN }}")
        
        HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
        RESPONSE_BODY=$(echo "$RESPONSE" | sed '$d')
        
        echo "Jenkins API 응답 코드: $HTTP_CODE"
        if [ "$HTTP_CODE" -ge 200 ] && [ "$HTTP_CODE" -lt 300 ]; then
          echo "Jenkins 작업이 성공적으로 트리거되었습니다."
        else
          echo "Jenkins 작업 트리거 실패: $RESPONSE_BODY"
          exit 1
        fi 